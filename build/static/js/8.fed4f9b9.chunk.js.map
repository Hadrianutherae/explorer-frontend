{"version":3,"sources":["constants/struct.types.ts","utils/fetchStruct.ts","services/transaction.api.service.ts","actions/transaction.actions.ts","components/transaction/transaction-io-summary/transaction-io-summary.component.tsx","components/transaction/transaction-raw-scripts/transaction-raw-scripts.component.tsx","components/transaction/transaction-summary/transaction-summary.component.tsx","pages/confirmed-transaction/confirmed-transaction.component.tsx","services/unconfirmedTransaction.api.service.ts","actions/unconfirmedTransaction.actions.ts","selectors/unconfirmedTransaction.ts","components/unconfirmed-transaction/unconfirmed-transaction-io-summary/unconfirmed-transaction-io-summary.component.tsx","components/unconfirmed-transaction/unconfirmed-transaction-raw-scripts/unconfirmed-transaction-raw-scripts.component.tsx","components/unconfirmed-transaction/unconfirmed-transaction-summary/unconfirmed-transaction-summary.component.tsx","components/unconfirmed-transaction/unconfirmed-transactions-item/unconfirmed-transactions-item.component.tsx","pages/unconfirmed-transaction/unconfirmed-transaction.component.tsx","components/error-message/error-mesage.component.tsx","pages/transaction/transaction.component.tsx"],"names":["GET_ALL_ISSUED_TOKENS_STRUCT","GET_TOTAL_ISSUED_TOKENS_STRUCT","GET_ISSUED_TOKENS_BY_ID_STRUCT","GET_UNCONFIRMED_TRANSACTIONS_STRUCT","GET_UNCONFIRMED_TRANSACTION_STRUCT","GET_ORACLE_POOL_DATA_STRUCT","GET_ADDRESSES_BALANCES_STRUCT","fetchStruct","dispatch","structId","method","url","params","startStructFetch","axios","then","res","body","data","result","stopStructFetch","Promise","resolve","error","errors","Error","reject","catch","TransactionApiService","id","get","apiUrl","response","environment","TransactionActions","getTransaction","type","GET_TRANSACTION","payload","GET_TRANSACTION_SUCCESS","GET_TRANSACTION_FAIL","clearTransactionsState","CLEAR_TRANSACTIONS_STATE","TransactionIoSummaryComponent","className","value","this","props","summary","totalCoinsTransferred","totalFee","feePerByte","onClick","onScriptToggle","isScriptShown","React","Component","TransactionRawScriptsComponent","items","map","item","index","key","Object","keys","i","length","trim","isBadValue","it","tokenId","amount","k","PureComponent","TransactionSummaryComponent","formatNumberMetricPrefix","size","desiredFormat","timestamp","block","to","height","confirmationsCount","ConfirmedTransaction","bind","match","nextProps","fetching","renderLoader","renderBody","setFailed","console","log","isFailedRequest","transaction","inputs","outputs","values","title","confirmations","ioSummary","isScriptsDisplayed","setTransactionScripts","ConfirmedTransactionComponent","connect","state","settings","bindActionCreators","SettingsActions","withRouter","UnconfirmedTransactionService","UnconfirmedTransactionActions","getUnconfirmedTransaction","getUnconfirmedTransactionStructSelector","getStruct","UnconfirmedTransactionIoSummaryComponent","UnconfirmedTransactionRawScriptsComponent","getObjectRaw","UnconfirmedTransactionSummaryComponent","UnconfirmedTransactionsItem","isClient","getAddressInputs","reduce","acc","address","getAddressOutputs","getTransactionState","setState","assets","defaultAssets","label","substr","buttonText","list","button","totalOutput","totalInputAddress","totalOutputAddress","isOutput","creationTimestamp","outputTransactionId","join","style","display","spentTransactionId","renderAssets","one","other","Math","abs","UnconfirmedTransactionsItemComponent","ownProps","UnconfirmedTransaction","timerId","undefined","prevProps","unconfirmedTransaction","message","toggleIsConfirmed","timer","setInterval","clearInterval","resetUnconfirmedTransaction","UnconfirmedTransactionComponent","resetStruct","ErrorMessageComponent","Transaction","isConfirmed","isConfirmedTransactionFailed","isUnconfirmedTransactionFailed","setUnconfirmedTransactionFailed","setConfirmedTransactionFailed","dispatchClearTransactionsState"],"mappings":"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","file":"static/js/8.fed4f9b9.chunk.js","sourcesContent":["export const SEARCH_TOKEN_BY_ID_STRUCT = 'assets/tokenid/issuingBox';\n\nexport const UNSPENT_SELL_ORDERS_BY_TOKEN_ID_STRUCT =\n  '/dex/tokens/tokenid/unspentSellOrders';\n\nexport const UNSPENT_BUY_ORDERS_BY_TOKEN_ID_STRUCT =\n  '/dex/tokens/tokenid/unspentBuyOrders';\n\nexport const GET_ALL_ISSUED_TOKENS_STRUCT = '/assets/issuingBoxes';\n\nexport const GET_TOTAL_ISSUED_TOKENS_STRUCT = '/assets/issuingBoxes/total';\n\nexport const GET_ISSUED_TOKENS_BY_ID_STRUCT = 'assets/id:/issuingBoxes';\n\nexport const GET_OPENAPI_YAML_STRUCT = '/docs/openapi';\n\nexport const GET_UNCONFIRMED_TRANSACTIONS_STRUCT = '/transactions/unconfirmed';\n\nexport const GET_UNCONFIRMED_TRANSACTION_STRUCT =\n  '/transactions/unconfirmed/:id';\n\nexport const GET_ORACLE_POOL_DATA_STRUCT = 'oracle/frontendData';\n\nexport const GET_ADDRESSES_BALANCES_STRUCT = 'addresses/balances';\n","import { stopStructFetch, startStructFetch } from 'redux-struct';\nimport axios from 'axios';\n\nexport const fetchStruct = (\n  dispatch: any,\n  structId: string,\n  method: string,\n  url: string,\n  params: any = null\n) => {\n  dispatch(startStructFetch(structId));\n\n  return axios[method](url, params)\n    .then((res: any) => res.body || res.data)\n    .then((result: any) => {\n      if (!result) {\n        dispatch(stopStructFetch(structId, result));\n\n        return Promise.resolve(result);\n      }\n\n      const error = result.errors || result.error;\n\n      if (error) {\n        dispatch(stopStructFetch(structId, new Error(error)));\n\n        return Promise.reject(new Error(error));\n      }\n\n      dispatch(stopStructFetch(structId, result));\n\n      return Promise.resolve(result);\n    })\n    .catch((error: Error) => {\n      dispatch(stopStructFetch(structId, error));\n\n      return Promise.reject(error);\n    });\n};\n","import axios, { AxiosResponse } from 'axios';\nimport environment from '../config/environment';\n\nexport class TransactionApiService {\n  static get apiUrl(): string {\n    return `${environment.apiUrl}/transactions`;\n  }\n\n  static getTransaction(id: string): any {\n    return axios\n      .get(`${TransactionApiService.apiUrl}/${id}`)\n      .then((response: AxiosResponse) => {\n        if (!response) {\n          return Promise.reject(\n            `Transaction api service. Request: ${TransactionApiService.apiUrl}/${id}.`\n          );\n        }\n\n        return response.data;\n      });\n  }\n}\n","import { Action, ActionCreatorsMapObject, Dispatch } from 'redux';\n\nimport {\n  GET_TRANSACTION,\n  GET_TRANSACTION_SUCCESS,\n  GET_TRANSACTION_FAIL,\n  CLEAR_TRANSACTIONS_STATE,\n} from '../constants/transaction.types';\nimport { TransactionApiService } from '../services/transaction.api.service';\n\nexport interface TransactionActions extends ActionCreatorsMapObject {\n  getTransaction: (id: string) => any;\n  clearTransactionsState: () => any;\n}\n\nexport const TransactionActions: TransactionActions = {\n  getTransaction(id: string): any {\n    return (dispatch: Dispatch<Action>) => {\n      dispatch({\n        type: GET_TRANSACTION,\n      });\n\n      TransactionApiService.getTransaction(id)\n        .then((data: any) => {\n          dispatch({\n            payload: {\n              data,\n            },\n            type: GET_TRANSACTION_SUCCESS,\n          });\n        })\n        .catch(() => {\n          dispatch({\n            type: GET_TRANSACTION_FAIL,\n          });\n        });\n    };\n  },\n  clearTransactionsState() {\n    return {\n      type: CLEAR_TRANSACTIONS_STATE,\n    };\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { IOSummary } from '../../../models/generated/iOSummary';\n\nimport { CoinValueComponent } from '../../common/coin-value/coin-value.component';\nimport './transaction-io-summary.scss';\n\ninterface ITransactionIoSummaryProps {\n  summary: IOSummary;\n  isScriptShown?: boolean;\n  onScriptToggle: () => void;\n}\n\nexport class TransactionIoSummaryComponent extends React.Component<\n  ITransactionIoSummaryProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-transaction-io-summary\">\n        <div className=\"bi-transaction-io-summary__header\">\n          <FormattedMessage id=\"components.transaction-io-summary.title\" />\n        </div>\n\n        <div className=\"bi-transaction-io-summary__body bi-table\">\n          <div className=\"bi-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.totalCoinsTransferred\" />\n            </div>\n\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent\n                value={this.props.summary.totalCoinsTransferred}\n              />\n            </div>\n          </div>\n\n          <div className=\"bi-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.totalFee\" />\n            </div>\n\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent value={this.props.summary.totalFee} />\n            </div>\n          </div>\n\n          <div className=\"bi-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.feePerByte\" />\n            </div>\n\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent value={this.props.summary.feePerByte} />\n            </div>\n          </div>\n\n          <div className=\"bi-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.scripts\" />\n            </div>\n\n            <div className=\"bi-transaction-io-summary__cell bi-transaction-io-summary__cell--value bi-table__cell\">\n              <button\n                className=\"bi-btn bi-btn--flat bi-btn--link\"\n                onClick={this.props.onScriptToggle}\n              >\n                {this.props.isScriptShown ? (\n                  <FormattedMessage id=\"components.transaction-io-summary.hideScripts\" />\n                ) : (\n                  <FormattedMessage id=\"components.transaction-io-summary.showScripts\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Asset } from '../../../models/generated/asset';\n\nimport './transaction-raw-scripts.scss';\n\ninterface ITransactionRawScriptsProps {\n  items: any[];\n}\n\nconst isBadValue = (item: any) => {\n  if (\n    item === null ||\n    (typeof item === 'object' && Object.keys(item).length === 0) ||\n    (typeof item === 'string' && item.trim().length === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport class TransactionRawScriptsComponent extends React.PureComponent<\n  ITransactionRawScriptsProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-transaction-raw-scripts\">\n        {this.props.items.map((item, index) => {\n          return (\n            <ul className=\"bi-transaction-raw-scripts__item\" key={index}>\n              {Object.keys(item).map((key, i) => {\n                if (isBadValue(item[key])) {\n                  return null;\n                }\n\n                if (key === 'assets') {\n                  return (\n                    <li key={key}>\n                      <b>{key}</b>:{' '}\n                      <ul>\n                        {item[key].map((it: Asset) => (\n                          <li key={item}>\n                            <b>{it.tokenId}</b>: {it.amount}\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  );\n                }\n\n                if (typeof item[key] === 'object') {\n                  return (\n                    <li key={key}>\n                      <b>{key}</b>:{' '}\n                      <ul>\n                        {Object.keys(item[key]).map((k) => (\n                          <li key={k}>\n                            <b>{k}</b>: {item[key][k]}\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  );\n                }\n\n                return (\n                  <li key={`${key}${i}`}>\n                    <b>{key}</b>: {item[key]}\n                  </li>\n                );\n              })}\n            </ul>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { formatNumberMetricPrefix } from '../../../utils/formatNumberMetricPrefix';\n\nimport { TransactionSummary } from '../../../models/generated/transactionSummary';\n\nimport { TimestampComponent } from '../../common/timestamp/timestamp.component';\n\nimport './transaction-summary.scss';\n\ninterface ITransactionSummaryProps {\n  summary: TransactionSummary;\n}\n\nexport class TransactionSummaryComponent extends React.Component<\n  ITransactionSummaryProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-transaction-summary\">\n        <div className=\"bi-transaction-summary__header\">\n          <FormattedMessage id=\"components.transaction-summary.title\" />\n        </div>\n\n        <div className=\"bi-transaction-summary__body bi-table\">\n          <div className=\"bi-transaction-summary__row bi-table__row\">\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-summary.size\" />\n            </div>\n\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--value bi-table__cell\">\n              {formatNumberMetricPrefix(this.props.summary.size, {\n                desiredFormat: 'k',\n              })}\n              B\n            </div>\n          </div>\n\n          <div className=\"bi-transaction-summary__row bi-table__row\">\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-summary.timestamp\" />\n            </div>\n\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--value bi-table__cell\">\n              <TimestampComponent timestamp={this.props.summary.timestamp} />\n            </div>\n          </div>\n\n          {this.props.summary.block && (\n            <div className=\"bi-transaction-summary__row bi-table__row\">\n              <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--header bi-table__cell\">\n                <FormattedMessage id=\"components.transaction-summary.blocks\" />\n              </div>\n\n              <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--value bi-table__cell\">\n                <Link to={`/blocks/${this.props.summary.block.id}`}>\n                  {this.props.summary.block.height}\n                </Link>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bi-transaction-summary__row bi-table__row\">\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-summary.confirmationsCount\" />\n            </div>\n\n            <div className=\"bi-transaction-summary__cell bi-transaction-summary__cell--value bi-table__cell\">\n              {this.props.summary.confirmationsCount}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux';\n\nimport { Transaction as TransactionModel } from '../../models/generated/transaction';\n\nimport { SettingsActions } from '../../actions/settings.actions';\nimport { TransactionActions } from '../../actions/transaction.actions';\nimport { SettingsState } from '../../reducers/settings.reducer';\nimport { TransactionState } from '../../reducers/transaction.reducer';\nimport { AppState } from '../../store/app.store';\n\nimport { TransactionIoSummaryComponent } from '../../components/transaction/transaction-io-summary/transaction-io-summary.component';\nimport { TransactionRawScriptsComponent } from '../../components/transaction/transaction-raw-scripts/transaction-raw-scripts.component';\nimport { TransactionSummaryComponent } from '../../components/transaction/transaction-summary/transaction-summary.component';\nimport { TransactionsItemComponent } from '../../components/transactions/transactions-item/transactions-item.component';\n\nimport './confirmed-transaction.scss';\nimport ProgressBar from '../../components/progress-bar/progress-bar';\nimport LoaderLogo from '../../components/loader/loader';\n\nclass ConfirmedTransaction extends React.PureComponent<\n  RouteComponentProps<{\n    id: string;\n  }> &\n    TransactionState &\n    TransactionActions &\n    SettingsActions &\n    SettingsState & {\n      toggleIsConfirmed: any;\n      setFailed: () => void;\n    }\n> {\n  constructor(props: any) {\n    super(props);\n\n    this.onScriptToggle = this.onScriptToggle.bind(this);\n  }\n\n  componentDidMount(): void {\n    this.props.getTransaction(this.props.match.params.id);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: any): void {\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      this.props.getTransaction(nextProps.match.params.id);\n    }\n  }\n\n  render(): JSX.Element {\n    const isFetching = this.props.fetching;\n\n    if (isFetching) {\n      return <div className=\"bi-transaction\">{this.renderLoader()}</div>;\n    }\n\n    return (\n      <div className=\"bi-transaction\">\n        <div className=\"bi-transaction__header\">\n          <div className=\"bi-transaction__title\">\n            <FormattedMessage id=\"components.transaction.title\" />\n          </div>\n          <div className=\"bi-transaction__subtitle\">\n            <FormattedMessage id=\"components.transaction.subtitle\" />\n          </div>\n        </div>\n        {this.renderBody()}\n      </div>\n    );\n  }\n\n  renderLoader(): JSX.Element | null {\n    return (\n      <ProgressBar className=\"bi-app__loading-text\">\n        <LoaderLogo />\n      </ProgressBar>\n    );\n  }\n\n  private renderBody(): JSX.Element | null | undefined {\n    const { setFailed } = this.props;\n\n    console.log('>> this.props.isFailedRequest', this.props.isFailedRequest);\n\n    if (this.props.isFailedRequest) {\n      setFailed();\n      return;\n    }\n\n    if (!this.props.transaction) {\n      return null;\n    }\n\n    const transaction: TransactionModel = {\n      id: this.props.transaction.summary.id,\n      inputs: this.props.transaction.inputs,\n      outputs: this.props.transaction.outputs,\n      timestamp: this.props.transaction.summary.timestamp,\n    };\n\n    return (\n      <div className=\"bi-transaction__body\">\n        <FormattedMessage\n          id=\"common.pages.transaction.title\"\n          values={{ id: this.props.transaction.summary.id }}\n        >\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <TransactionsItemComponent\n          transaction={transaction}\n          confirmations={this.props.transaction.summary.confirmationsCount}\n        />\n\n        <div className=\"bi-transaction__tables g-flex\">\n          <div className=\"bi-transaction__table g-flex__item\">\n            <TransactionSummaryComponent\n              summary={this.props.transaction.summary}\n            />\n          </div>\n\n          <div className=\"bi-transaction__table g-flex__item\">\n            <TransactionIoSummaryComponent\n              summary={this.props.transaction.ioSummary}\n              isScriptShown={this.props.isScriptsDisplayed}\n              onScriptToggle={this.onScriptToggle}\n            />\n          </div>\n        </div>\n\n        {this.props.isScriptsDisplayed && (\n          <div className=\"bi-transaction__scripts\">\n            <div className=\"bi-transaction__title\">\n              <FormattedMessage id=\"components.transaction.scripts.input\" />\n            </div>\n\n            <TransactionRawScriptsComponent\n              items={this.props.transaction.inputs}\n            />\n          </div>\n        )}\n\n        {this.props.isScriptsDisplayed && (\n          <div className=\"bi-transaction__scripts\">\n            <div className=\"bi-transaction__title\">\n              <FormattedMessage id=\"components.transaction.scripts.output\" />\n            </div>\n\n            <TransactionRawScriptsComponent\n              items={this.props.transaction.outputs}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private onScriptToggle(): void {\n    this.props.setTransactionScripts(!this.props.isScriptsDisplayed);\n  }\n}\n\nfunction mapStateToProps(state: AppState): any {\n  return { ...state.transaction, ...state.settings };\n}\n\nfunction mapDispatchToProps(dispatch: any): ActionCreatorsMapObject {\n  return bindActionCreators(\n    { ...TransactionActions, ...SettingsActions },\n    dispatch\n  );\n}\n\nconst ConfirmedTransactionComponent: any = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(ConfirmedTransaction));\n\nexport default ConfirmedTransactionComponent;\n","import environment from '../config/environment';\nimport { fetchStruct } from '../utils/fetchStruct';\nimport { GET_UNCONFIRMED_TRANSACTION_STRUCT } from '../constants/struct.types';\n\nexport class UnconfirmedTransactionService {\n  static get apiUrl(): string {\n    return `${environment.apiUrl}`;\n  }\n\n  static getUnconfirmedTransaction(dispatch: any, id: string): any {\n    return fetchStruct(\n      dispatch,\n      GET_UNCONFIRMED_TRANSACTION_STRUCT,\n      'get',\n      `${UnconfirmedTransactionService.apiUrl}/transactions/unconfirmed/${id}`\n    ).catch(() => ({}));\n  }\n}\n","import { ActionCreatorsMapObject } from 'redux';\nimport { UnconfirmedTransactionService } from '../services/unconfirmedTransaction.api.service';\n\nexport interface UnconfirmedTransactionActions extends ActionCreatorsMapObject {\n  getUnconfirmedTransaction: (params: any) => any;\n}\n\nexport const UnconfirmedTransactionActions: UnconfirmedTransactionActions = {\n  getUnconfirmedTransaction(id: string) {\n    return (dispatch: any) =>\n      UnconfirmedTransactionService.getUnconfirmedTransaction(dispatch, id);\n  },\n};\n","import { getStruct } from 'redux-struct';\nimport { GET_UNCONFIRMED_TRANSACTION_STRUCT } from '../constants/struct.types';\n\nexport const getUnconfirmedTransactionStructSelector = (state: any) =>\n  getStruct(GET_UNCONFIRMED_TRANSACTION_STRUCT)(state);\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { CoinValueComponent } from '../../common/coin-value/coin-value.component';\nimport './unconfirmed-transaction-io-summary.scss';\n\ninterface ITransactionIoSummaryProps {\n  summary: any;\n  isScriptShown?: boolean;\n  onScriptToggle: () => void;\n}\n\nexport class UnconfirmedTransactionIoSummaryComponent extends React.Component<\n  ITransactionIoSummaryProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-unconfirmed-transaction-io-summary\">\n        <div className=\"bi-unconfirmed-transaction-io-summary__header\">\n          <FormattedMessage id=\"components.transaction-io-summary.title\" />\n        </div>\n\n        <div className=\"bi-unconfirmed-transaction-io-summary__body bi-table\">\n          <div className=\"bi-unconfirmed-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.totalCoinsTransferred\" />\n            </div>\n\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent\n                value={this.props.summary.totalCoinsTransferred}\n              />\n            </div>\n          </div>\n\n          <div className=\"bi-unconfirmed-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.totalFee\" />\n            </div>\n\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent value={this.props.summary.totalFee} />\n            </div>\n          </div>\n\n          <div className=\"bi-unconfirmed-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.feePerByte\" />\n            </div>\n\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--value bi-table__cell\">\n              <CoinValueComponent value={this.props.summary.feePerByte} />\n            </div>\n          </div>\n\n          <div className=\"bi-unconfirmed-transaction-io-summary__row bi-table__row\">\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-io-summary.scripts\" />\n            </div>\n\n            <div className=\"bi-unconfirmed-transaction-io-summary__cell bi-unconfirmed-transaction-io-summary__cell--value bi-table__cell\">\n              <button\n                className=\"bi-btn bi-btn--flat bi-btn--link\"\n                onClick={this.props.onScriptToggle}\n              >\n                {this.props.isScriptShown ? (\n                  <FormattedMessage id=\"components.transaction-io-summary.hideScripts\" />\n                ) : (\n                  <FormattedMessage id=\"components.transaction-io-summary.showScripts\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Asset } from '../../../models/generated/asset';\n\nimport './unconfirmed-transaction-raw-scripts.scss';\n\ninterface ITransactionRawScriptsProps {\n  items: any[];\n}\n\nconst isBadValue = (item: any) => {\n  if (\n    item === null ||\n    (typeof item === 'object' && Object.keys(item).length === 0) ||\n    (typeof item === 'string' && item.trim().length === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst getObjectRaw = (item: any, key: any) => {\n  if (isBadValue(item[key])) {\n    return <div key={key}></div>;\n  }\n\n  return (\n    <li key={item[key]}>\n      <b>{key}</b>:{' '}\n      <ul>\n        {Object.keys(item[key]).map((k) => {\n          if (typeof item[key][k] === 'object') {\n            return getObjectRaw(item[key], k);\n          }\n\n          return (\n            <li key={item[key][k]}>\n              <b>{k}</b>: {item[key][k]}\n            </li>\n          );\n        })}\n      </ul>\n    </li>\n  );\n};\n\nexport class UnconfirmedTransactionRawScriptsComponent extends React.PureComponent<\n  ITransactionRawScriptsProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-unconfirmed-transaction-raw-scripts\">\n        {this.props.items.map((item, index) => {\n          return (\n            <ul\n              className=\"bi-unconfirmed-transaction-raw-scripts__item\"\n              key={index}\n            >\n              {Object.keys(item).map((key, i) => {\n                if (isBadValue(item[key])) {\n                  return null;\n                }\n\n                if (key === 'assets') {\n                  return (\n                    <li key={`${key}${index}`}>\n                      <b>{key}</b>:{' '}\n                      <ul>\n                        {item[key].map((it: Asset) => (\n                          <li key={item}>\n                            <b>{it.tokenId}</b>: {it.amount}\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  );\n                }\n\n                if (typeof item[key] === 'object') {\n                  return getObjectRaw(item, key);\n                }\n\n                return (\n                  <li key={`${key}${index}`}>\n                    <b>{key}</b>: {item[key]}\n                  </li>\n                );\n              })}\n            </ul>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { formatNumberMetricPrefix } from '../../../utils/formatNumberMetricPrefix';\n\nimport './unconfirmed-transaction-summary.scss';\n\ninterface ITransactionSummaryProps {\n  summary: any;\n}\n\nexport class UnconfirmedTransactionSummaryComponent extends React.Component<\n  ITransactionSummaryProps\n> {\n  render(): JSX.Element {\n    return (\n      <div className=\"bi-unconfirmed-transaction-summary\">\n        <div className=\"bi-unconfirmed-transaction-summary__header\">\n          <FormattedMessage id=\"components.transaction-summary.title\" />\n        </div>\n\n        <div className=\"bi-unconfirmed-transaction-summary__body bi-table\">\n          <div className=\"bi-unconfirmed-transaction-summary__row bi-table__row\">\n            <div className=\"bi-unconfirmed-transaction-summary__cell bi-unconfirmed-transaction-summary__cell--header bi-table__cell\">\n              <FormattedMessage id=\"components.transaction-summary.size\" />\n            </div>\n\n            <div className=\"bi-unconfirmed-transaction-summary__cell bi-unconfirmed-transaction-summary__cell--value bi-table__cell\">\n              {formatNumberMetricPrefix(this.props.summary.size, {\n                desiredFormat: 'k',\n              })}\n              B\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { FormattedMessage, FormattedPlural } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { AddressId } from '../../../models/generated/addressId';\nimport { Transaction } from '../../../models/generated/transaction';\nimport { TransactionOutput } from '../../../models/generated/transactionOutput';\n\nimport { SettingsState } from '../../../reducers/settings.reducer';\nimport { AppState } from '../../../store/app.store';\n\nimport { CoinValueComponent } from '../../common/coin-value/coin-value.component';\nimport { TimestampComponent } from '../../common/timestamp/timestamp.component';\n\nimport { DropdownListComponent } from '../../common/dropdown-list/dropdown-list.component';\nimport { ArrowThickIcon } from '../../common/icons/common.icons';\nimport './unconfirmed-transactions-item.scss';\n\ninterface IBlockTransactionsItemProps {\n  transaction: Transaction;\n  confirmations?: any;\n  address?: AddressId;\n  key?: string;\n}\n\nclass UnconfirmedTransactionsItem extends React.Component<\n  IBlockTransactionsItemProps & SettingsState\n> {\n  state: any = {\n    isClient: false,\n  };\n\n  componentDidMount(): void {\n    this.setState({\n      isClient: true,\n    });\n  }\n\n  renderAssets(assets: TransactionOutput['assets']): JSX.Element | null {\n    if (assets.length === 0) {\n      return null;\n    }\n\n    const defaultAssets = assets.map(({ amount, tokenId }) => ({\n      label: tokenId.substr(0, 4),\n      value: amount,\n    }));\n\n    const buttonText = `+${defaultAssets.length}`;\n\n    return <DropdownListComponent list={assets} button={buttonText} />;\n  }\n\n  getAddressInputs = () =>\n    this.props.transaction.inputs.reduce(\n      (acc, { address, value }) =>\n        address === this.props.address ? acc + value : acc,\n      0\n    );\n\n  getAddressOutputs = () =>\n    this.props.transaction.outputs.reduce(\n      (acc, { address, value }) =>\n        address === this.props.address ? acc + value : acc,\n      0\n    );\n\n  getTransactionState = () => {\n    const inputs = this.getAddressInputs();\n    const outputs = this.getAddressOutputs();\n\n    if (outputs !== 0 && outputs - inputs > 0) {\n      return 'input';\n    }\n\n    return 'output';\n  };\n\n  render(): JSX.Element {\n    let totalOutput = 0;\n    const totalInputAddress = this.getAddressInputs();\n    const totalOutputAddress = this.getAddressOutputs();\n    const isOutput = this.getTransactionState() === 'output';\n\n    return (\n      <div className=\"bi-unconfirmed-transactions-item\">\n        <div className=\"bi-unconfirmed-transactions-item__header g-flex\">\n          <Link\n            className=\"bi-unconfirmed-transactions-item__title u-word-wrap g-flex__item-fixed\"\n            to={`/transactions/${this.props.transaction.id}`}\n          >\n            {this.props.transaction.id}\n          </Link>\n          <div className=\"bi-unconfirmed-transactions-item__timestamp g-flex__item-fixed\">\n            <TimestampComponent\n              timestamp={\n                this.props.transaction.creationTimestamp ||\n                this.props.transaction.timestamp\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"bi-unconfirmed-transactions-item__body g-flex\">\n          <div className=\"bi-unconfirmed-transactions-item__inputs g-flex__item\">\n            {this.props.transaction.inputs.map((address, index) => {\n              return (\n                <div\n                  className=\"bi-unconfirmed-transactions-item__input g-flex\"\n                  key={`${index}__${address.id}`}\n                >\n                  <div className=\"bi-unconfirmed-transactions-item__address\">\n                    {address.address ? (\n                      <Link\n                        className=\"u-word-wrap u-word-wrap--ellipsis\"\n                        to={`/addresses/${address.address}`}\n                      >\n                        {address.address}\n                      </Link>\n                    ) : (\n                      <FormattedMessage id=\"components.transaction-item.null-address\" />\n                    )}\n                  </div>\n\n                  {this.props.isScriptsDisplayed &&\n                    address.outputTransactionId && (\n                      <div className=\"bi-unconfirmed-transactions-item__address-output g-flex__item-fixed u-word-wrap u-word-wrap--ellipsis\">\n                        (<CoinValueComponent value={address.value} /> -{' '}\n                        <Link\n                          to={`/transactions/${address.outputTransactionId}`}\n                        >\n                          <FormattedMessage id=\"components.transaction-item.address-output\" />\n                        </Link>\n                        )\n                      </div>\n                    )}\n                </div>\n              );\n            })}\n          </div>\n\n          {this.props.address ? (\n            <div\n              className={[\n                'bi-unconfirmed-transactions-item__arrow',\n                isOutput\n                  ? 'bi-unconfirmed-transactions-item__arrow--output'\n                  : 'bi-unconfirmed-transactions-item__arrow--input',\n              ].join(' ')}\n            >\n              <ArrowThickIcon className=\"bi-unconfirmed-transactions-item__arrow-icon\" />\n            </div>\n          ) : (\n            <div className=\"bi-unconfirmed-transactions-item__arrow\">\n              <ArrowThickIcon className=\"bi-unconfirmed-transactions-item__arrow-icon\" />\n            </div>\n          )}\n\n          <div className=\"bi-unconfirmed-transactions-item__outputs g-flex__item g-flex-column\">\n            {this.props.transaction.outputs.map((address, index) => {\n              totalOutput += address.value;\n\n              return (\n                <div\n                  className=\"bi-unconfirmed-transactions-item__output g-flex\"\n                  key={`${index}__${address.id}`}\n                >\n                  <div className=\"bi-unconfirmed-transactions-item__address g-flex__item-fixed\">\n                    {address.address ? (\n                      <Link\n                        className=\"u-word-wrap u-word-wrap--ellipsis\"\n                        to={`/addresses/${address.address}`}\n                      >\n                        {address.address}\n                      </Link>\n                    ) : (\n                      <span className=\"u-word-wrap u-word-wrap--ellipsis\">\n                        <FormattedMessage id=\"components.transaction-item.null-address\" />\n                      </span>\n                    )}\n                  </div>\n\n                  <div\n                    className=\"bi-unconfirmed-transactions-item__address-spent g-flex__item u-word-wrap u-word-wrap--ellipsis\"\n                    style={{\n                      display:\n                        this.props.isScriptsDisplayed || !this.state.isClient\n                          ? 'block'\n                          : 'none',\n                    }}\n                  >\n                    {address.spentTransactionId ? (\n                      <Link to={`/transactions/${address.spentTransactionId}`}>\n                        <FormattedMessage id=\"components.transaction-item.spent\" />\n                      </Link>\n                    ) : (\n                      <FormattedMessage id=\"components.transaction-item.unspent\" />\n                    )}\n                  </div>\n\n                  <div className=\"bi-unconfirmed-transactions-item__value g-flex__item-fixed\">\n                    <CoinValueComponent value={address.value} />\n\n                    {this.renderAssets(address.assets)}\n                  </div>\n                </div>\n              );\n            })}\n\n            <div className=\"bi-unconfirmed-transactions-item__footer g-flex-column__item-fixed g-flex\">\n              {this.props.confirmations > 0 && (\n                <div className=\"bi-unconfirmed-transactions-item__confirmations g-flex__item-fixed\">\n                  {this.props.confirmations}{' '}\n                  <FormattedPlural\n                    value={this.props.confirmations}\n                    one={\n                      <FormattedMessage id=\"components.transaction-item.confirmation.one\" />\n                    }\n                    other={\n                      <FormattedMessage id=\"components.transaction-item.confirmation.other\" />\n                    }\n                  />\n                </div>\n              )}\n\n              <div className=\"bi-unconfirmed-transactions-item__confirmations g-flex__item-fixed item__confirmations--unconfirmed\">\n                <FormattedMessage id=\"components.transaction-item.unconfirmed\" />\n              </div>\n\n              <div\n                className={[\n                  'bi-unconfirmed-transactions-item__total-value g-flex__item-fixed',\n                  this.props.address &&\n                    (isOutput\n                      ? 'bi-unconfirmed-transactions-item__total-value--output'\n                      : 'bi-unconfirmed-transactions-item__total-value--input'),\n                ].join(' ')}\n              >\n                <CoinValueComponent\n                  value={\n                    this.props.address\n                      ? Math.abs(totalOutputAddress - totalInputAddress)\n                      : totalOutput\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(\n  state: AppState,\n  ownProps: IBlockTransactionsItemProps\n): any {\n  return {\n    ...state.settings,\n    ...ownProps,\n  };\n}\n\nexport const UnconfirmedTransactionsItemComponent = connect(mapStateToProps)(\n  UnconfirmedTransactionsItem\n);\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux';\nimport { resetStruct } from 'redux-struct';\n\nimport { UnconfirmedTransactionActions } from 'src/actions/unconfirmedTransaction.actions';\nimport { getUnconfirmedTransactionStructSelector } from 'src/selectors/unconfirmedTransaction';\nimport { GET_UNCONFIRMED_TRANSACTION_STRUCT } from 'src/constants/struct.types';\nimport { SettingsActions } from '../../actions/settings.actions';\nimport { SettingsState } from '../../reducers/settings.reducer';\nimport { AppState } from '../../store/app.store';\n\nimport { UnconfirmedTransactionIoSummaryComponent } from '../../components/unconfirmed-transaction/unconfirmed-transaction-io-summary/unconfirmed-transaction-io-summary.component';\nimport { UnconfirmedTransactionRawScriptsComponent } from '../../components/unconfirmed-transaction/unconfirmed-transaction-raw-scripts/unconfirmed-transaction-raw-scripts.component';\nimport { UnconfirmedTransactionSummaryComponent } from '../../components/unconfirmed-transaction/unconfirmed-transaction-summary/unconfirmed-transaction-summary.component';\nimport { UnconfirmedTransactionsItemComponent } from '../../components/unconfirmed-transaction/unconfirmed-transactions-item/unconfirmed-transactions-item.component';\n\nimport './unconfirmed-transaction.scss';\nimport ProgressBar from '../../components/progress-bar/progress-bar';\nimport LoaderLogo from '../../components/loader/loader';\n\nclass UnconfirmedTransaction extends React.PureComponent<\n  RouteComponentProps<{\n    id: string;\n  }> &\n    UnconfirmedTransactionActions &\n    SettingsActions &\n    SettingsState & {\n      unconfirmedTransaction: any;\n      timerId: any;\n      toggleIsConfirmed: any;\n      setFailed: () => void;\n    }\n> {\n  state = {\n    timerId: undefined,\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    this.onScriptToggle = this.onScriptToggle.bind(this);\n  }\n\n  componentDidUpdate(prevProps: any): void {\n    if (\n      this.props.unconfirmedTransaction.error &&\n      this.props.unconfirmedTransaction.error.message !== 'Network Error'\n    ) {\n      this.props.toggleIsConfirmed(true);\n    }\n\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      this.props.getUnconfirmedTransaction(this.props.match.params.id);\n    }\n  }\n\n  componentDidMount(): void {\n    this.props.getUnconfirmedTransaction(this.props.match.params.id);\n\n    const timer = setInterval(\n      () => this.props.getUnconfirmedTransaction(this.props.match.params.id),\n      5000\n    );\n\n    this.setState({ timerId: timer });\n  }\n\n  componentWillUnmount() {\n    if (this.state.timerId) {\n      clearInterval(this.state.timerId);\n    }\n\n    this.props.resetUnconfirmedTransaction();\n  }\n\n  render(): JSX.Element {\n    const { data, error }: any = this.props.unconfirmedTransaction;\n\n    if (!data && !error) {\n      return <div className=\"bi-transaction\">{this.renderLoader()}</div>;\n    }\n\n    return (\n      <div className=\"bi-transaction\">\n        <div className=\"bi-transaction__header\">\n          <div className=\"bi-transaction__title\">\n            <FormattedMessage id=\"components.unconfirmed-transaction.title\" />\n          </div>\n          <div className=\"bi-transaction__subtitle\">\n            <FormattedMessage id=\"components.unconfirmed-transaction.subtitle\" />\n          </div>\n        </div>\n        {this.renderBody()}\n      </div>\n    );\n  }\n\n  renderLoader(): JSX.Element | null {\n    return (\n      <ProgressBar className=\"bi-app__loading-text\">\n        <LoaderLogo />\n      </ProgressBar>\n    );\n  }\n\n  private renderBody(): JSX.Element | null | undefined {\n    const { data, error }: any = this.props.unconfirmedTransaction;\n\n    console.log('>> data', data);\n    console.log('>> error', error);\n\n    if (error) {\n      this.props.setFailed();\n      return;\n    }\n\n    if (!data) {\n      return null;\n    }\n\n    const transaction: any = {\n      id: data.id,\n      inputs: data.inputs,\n      outputs: data.outputs,\n      creationTimestamp: data.creationTimestamp,\n      size: data.size,\n      ioSummary: data.ioSummary,\n    };\n\n    return (\n      <div className=\"bi-transaction__body\">\n        <FormattedMessage\n          id=\"common.pages.unconfirmed-transaction.title\"\n          values={{ id: transaction.id }}\n        >\n          {(title) => (\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n          )}\n        </FormattedMessage>\n\n        <UnconfirmedTransactionsItemComponent transaction={transaction} />\n\n        <div className=\"bi-transaction__tables g-flex\">\n          <div className=\"bi-transaction__table g-flex__item\">\n            <UnconfirmedTransactionSummaryComponent summary={transaction} />\n          </div>\n\n          <div className=\"bi-transaction__table g-flex__item\">\n            <UnconfirmedTransactionIoSummaryComponent\n              summary={transaction.ioSummary}\n              isScriptShown={this.props.isScriptsDisplayed}\n              onScriptToggle={this.onScriptToggle}\n            />\n          </div>\n        </div>\n\n        {this.props.isScriptsDisplayed && (\n          <div className=\"bi-transaction__scripts\">\n            <div className=\"bi-transaction__title\">\n              <FormattedMessage id=\"components.transaction.scripts.input\" />\n            </div>\n\n            <UnconfirmedTransactionRawScriptsComponent\n              items={transaction.inputs}\n            />\n          </div>\n        )}\n\n        {this.props.isScriptsDisplayed && (\n          <div className=\"bi-transaction__scripts\">\n            <div className=\"bi-transaction__title\">\n              <FormattedMessage id=\"components.transaction.scripts.output\" />\n            </div>\n\n            <UnconfirmedTransactionRawScriptsComponent\n              items={transaction.outputs}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  private onScriptToggle(): void {\n    this.props.setTransactionScripts(!this.props.isScriptsDisplayed);\n  }\n}\n\nfunction mapStateToProps(state: AppState): any {\n  return {\n    unconfirmedTransaction: getUnconfirmedTransactionStructSelector(state),\n    ...state.settings,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any): ActionCreatorsMapObject {\n  return bindActionCreators(\n    {\n      ...UnconfirmedTransactionActions,\n      ...SettingsActions,\n      resetUnconfirmedTransaction: () =>\n        dispatch(resetStruct(GET_UNCONFIRMED_TRANSACTION_STRUCT)),\n    },\n    dispatch\n  );\n}\n\nconst UnconfirmedTransactionComponent: any = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(UnconfirmedTransaction));\n\nexport default UnconfirmedTransactionComponent;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport './error-message.scss';\n\ninterface IErrorMessage {\n  message: string;\n}\n\nclass ErrorMessageComponent extends React.PureComponent<IErrorMessage> {\n  render() {\n    const { message } = this.props;\n\n    return (\n      <div className=\"error-message\">\n        <div className=\"error-message__content\">\n          <FormattedMessage id={message} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { ErrorMessageComponent };\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\nimport ConfirmedTransactionComponent from '../confirmed-transaction/confirmed-transaction.component';\nimport UnconfirmedTransactionComponent from '../unconfirmed-transaction/unconfirmed-transaction.component';\nimport { ErrorMessageComponent } from '../../components/error-message/error-mesage.component';\nimport { TransactionActions } from 'src/actions/transaction.actions';\nimport { connect } from 'react-redux';\nimport { GET_UNCONFIRMED_TRANSACTION_STRUCT } from 'src/constants/struct.types';\nimport { resetStruct } from 'redux-struct';\n\nclass Transaction extends React.PureComponent<\n  RouteComponentProps<{\n    id: string;\n  }> & {\n    dispatchClearTransactionsState: TransactionActions['clearTransactionsState'];\n  }\n> {\n  state = {\n    isConfirmed: false,\n    isConfirmedTransactionFailed: false,\n    isUnconfirmedTransactionFailed: false,\n  };\n\n  toggleIsConfirmed = (isConfirmed: boolean) => {\n    this.setState({ isConfirmed });\n  };\n\n  setUnconfirmedTransactionFailed = () => {\n    this.setState({ isUnconfirmedTransactionFailed: true });\n  };\n\n  setConfirmedTransactionFailed = () => {\n    this.setState({ isConfirmedTransactionFailed: true });\n  };\n\n  componentWillUnmount() {\n    this.props.dispatchClearTransactionsState();\n  }\n\n  render(): any {\n    const {\n      isConfirmed,\n      isConfirmedTransactionFailed,\n      isUnconfirmedTransactionFailed,\n    } = this.state;\n\n    if (!isConfirmedTransactionFailed || !isUnconfirmedTransactionFailed) {\n      if (!isConfirmed) {\n        return (\n          <UnconfirmedTransactionComponent\n            toggleIsConfirmed={this.toggleIsConfirmed}\n            setFailed={this.setUnconfirmedTransactionFailed}\n          />\n        );\n      }\n\n      return (\n        <ConfirmedTransactionComponent\n          toggleIsConfirmed={this.toggleIsConfirmed}\n          setFailed={this.setConfirmedTransactionFailed}\n        />\n      );\n    }\n\n    return (\n      <ErrorMessageComponent message=\"components.transaction.error-message\" />\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  dispatchClearTransactionsState: () => {\n    dispatch(TransactionActions.clearTransactionsState());\n    dispatch(resetStruct(GET_UNCONFIRMED_TRANSACTION_STRUCT));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Transaction);\n"],"sourceRoot":""}