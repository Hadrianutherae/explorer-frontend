{"version":3,"sources":["constants/struct.types.ts","utils/fetchStruct.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/address.api.service.ts","actions/address.actions.ts","selectors/addresses.ts","pages/rich-list/rich-list.component.tsx"],"names":["SEARCH_TOKEN_BY_ID_STRUCT","UNSPENT_SELL_ORDERS_BY_TOKEN_ID_STRUCT","UNSPENT_BUY_ORDERS_BY_TOKEN_ID_STRUCT","GET_ALL_ISSUED_TOKENS_STRUCT","GET_TOTAL_ISSUED_TOKENS_STRUCT","GET_UNCONFIRMED_TRANSACTIONS_STRUCT","GET_UNCONFIRMED_TRANSACTION_STRUCT","GET_ORACLE_POOL_DATA_STRUCT","GET_ADDRESSES_BALANCES_STRUCT","fetchStruct","dispatch","structId","method","url","params","startStructFetch","axios","then","res","body","data","result","stopStructFetch","Promise","resolve","error","errors","Error","reject","catch","asyncGeneratorStep","gen","_next","_throw","key","arg","info","value","done","AddressApiService","id","get","environment","apiUrl","response","fn","offset","limit","this","getUnconfirmed","unconfirmed","total","getConfirmed","confirmed","items","length","newLimit","self","args","arguments","apply","err","undefined","AddressActions","getAddress","type","GET_ADDRESS","payload","GET_ADDRESS_SUCCESS","getAddressTransactions","GET_ADDRESS_TRANSACTIONS","GET_ADDRESS_TRANSACTIONS_SUCCESS","getAddressesBalances","addressesBalancesStructSelector","state","getStruct","connect","addressesBalances","bindActionCreators","props","console","log","useEffect","addresses","useMemo","filter","address","className","href","target","rel","map","item","i","to","formatNumber","integerSeparator","Number","String","balance","split","slice"],"mappings":"mIAAA,kTAAO,IAAMA,EAA4B,4BAE5BC,EACX,wCAEWC,EACX,uCAEWC,EAA+B,uBAE/BC,EAAiC,6BAIjCC,EAAsC,4BAEtCC,EACX,gCAEWC,EAA8B,sBAE9BC,EAAgC,sB,iCCrB7C,gEAGaC,EAAc,SACzBC,EACAC,EACAC,EACAC,GAEI,IADJC,EACG,uDADW,KAId,OAFAJ,EAASK,2BAAiBJ,IAEnBK,IAAMJ,GAAQC,EAAKC,GACvBG,MAAK,SAACC,GAAD,OAAcA,EAAIC,MAAQD,EAAIE,QACnCH,MAAK,SAACI,GACL,IAAKA,EAGH,OAFAX,EAASY,0BAAgBX,EAAUU,IAE5BE,QAAQC,QAAQH,GAGzB,IAAMI,EAAQJ,EAAOK,QAAUL,EAAOI,MAEtC,OAAIA,GACFf,EAASY,0BAAgBX,EAAU,IAAIgB,MAAMF,KAEtCF,QAAQK,OAAO,IAAID,MAAMF,MAGlCf,EAASY,0BAAgBX,EAAUU,IAE5BE,QAAQC,QAAQH,OAExBQ,OAAM,SAACJ,GAGN,OAFAf,EAASY,0BAAgBX,EAAUc,IAE5BF,QAAQK,OAAOH,Q,wGCpC5B,SAASK,EAAmBC,EAAKP,EAASI,EAAQI,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOL,EAAIG,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOZ,GAEP,YADAG,EAAOH,GAILW,EAAKE,KACPd,EAAQa,GAERd,QAAQC,QAAQa,GAAOpB,KAAKe,EAAOC,G,6DCN1BM,EAAb,wGAKoBC,GAChB,OAAOxB,IACJyB,IADI,UACGC,IAAYC,OADf,sBACmCH,IACvCvB,MAAK,SAAC2B,GACL,OAAKA,EAMEA,EAASxB,KALPG,QAAQK,OAAR,wCAC4Bc,IAAYC,OADxC,sBAC4DH,EAD5D,WAVjB,mCAmBsBA,EAAY1B,GAC9B,OAAOE,IACJyB,IADI,UACGC,IAAYC,OADf,sBACmCH,EADnC,iBACsD,CACzD1B,WAEDG,MAAK,SAAC2B,GACL,OAAKA,EAMEA,EAASxB,KALPG,QAAQK,OAAR,wCAC4Bc,IAAYC,OADxC,sBAC4DH,EAD5D,wBA1BjB,qCAmCwBA,EAAY1B,GAChC,OAAOE,IACJyB,IADI,UACGC,IAAYC,OADf,+CAC4DH,GAAM,CACrE1B,WAEDG,MAAK,SAAC2B,GACL,OAAKA,EAMEA,EAASxB,KALPG,QAAQK,OAAR,wCAC4Bc,IAAYC,OADxC,sBAC4DH,EAD5D,wBA1CjB,mDDU0CK,ECV1C,GDU0CA,ECV1C,qBAmDsCL,EAAY1B,GAnDlD,0FAoDYgC,EAAkBhC,EAAlBgC,OAAQC,EAAUjC,EAAViC,MApDpB,SAqD8BC,KAAKC,eAAeT,EAAI,CAAEM,SAAQC,UArDhE,YAuD8B,KAFpBG,EArDV,QAuDoBC,OAAeD,EAAYC,MAAQL,GAvDvD,gCAwD8BE,KAAKI,aAAaZ,EAAI,CAC5CM,OAAQA,EAASI,EAAYC,MAC7BJ,UA1DR,cAwDYM,EAxDZ,yBA6Da,CACLC,MAAOD,EAAUC,MACjBH,MAAOD,EAAYC,MAAQE,EAAUF,QA/D7C,YAmEQD,EAAYI,MAAMC,OAASR,GAnEnC,wBAoEYS,EAAWT,EAAQG,EAAYI,MAAMC,OApEjD,UAsE8BP,KAAKI,aAAaZ,EAAI,CAC5CM,OAAQ,EACRC,MAAOS,IAxEf,eAsEYH,EAtEZ,yBA2Ea,CACLC,MAAM,GAAD,mBAAMJ,EAAYI,OAAlB,YAA4BD,EAAUC,QAC3CH,MAAOD,EAAYC,MAAQE,EAAUF,QA7E7C,yBAiF4BH,KAAKI,aAAaZ,EAAI,CAC5CM,OAAQ,EACRC,MAAO,IAnFb,eAiFUM,EAjFV,yBAsFW,CACLC,MAAM,YAAKJ,EAAYI,OACvBH,MAAOD,EAAYC,MAAQE,EAAUF,QAxF3C,gDDWS,WACL,IAAIM,EAAOT,KACPU,EAAOC,UACX,OAAO,IAAIpC,SAAQ,SAAUC,EAASI,GACpC,IAAIG,EAAMc,EAAGe,MAAMH,EAAMC,GAEzB,SAAS1B,EAAMK,GACbP,EAAmBC,EAAKP,EAASI,EAAQI,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAO4B,GACd/B,EAAmBC,EAAKP,EAASI,EAAQI,EAAOC,EAAQ,QAAS4B,GAGnE7B,OAAM8B,QCzBZ,oGA4F8BpD,GAC1B,OAAOD,YACLC,EACAF,IACA,MAHgB,UAIbkC,IAAYC,OAJC,oCA7FtB,6BAEI,MAAM,GAAN,OAAUD,IAAYC,OAAtB,kBAFJ,KCUaoB,EAAiC,CAC5CC,WAD4C,SACjCxB,GACT,OAAO,SAAC9B,GACNA,EAAS,CACPuD,KAAMC,MAGR3B,EAAkByB,WAAWxB,GAAIvB,MAAK,SAACG,GACrCV,EAAS,CACPyD,QAAS,CACP/C,QAEF6C,KAAMG,WAMdC,uBAlB4C,SAkBrB7B,EAAY1B,GACjC,OAAO,SAACJ,GACNA,EAAS,CACPuD,KAAMK,MAGR/B,EAAkB8B,uBAAuB7B,EAAI1B,GAAQG,MAAK,SAACG,GACzDV,EAAS,CACPyD,QAAS,CACP/C,QAEF6C,KAAMM,WAMdC,qBAnC4C,WAoC1C,OAAO,SAAC9D,GAAD,OAAmB6B,EAAkBiC,qBAAqB9D,O,4HCjDxD+D,EAAkC,SAACC,GAAD,OAC7CC,oBAAUnE,IAAVmE,CAAyCD,I,mDCgH5BE,uBARS,SAACF,GAAD,MAAiB,CACvCG,kBAAmBJ,EAAgCC,OAG1B,SAAChE,GAC1B,OAAOoE,6BAAmB,eAAKf,KAAkBrD,KAGpCkE,EAzGE,SAACG,GAAgB,IAAD,EACvBF,EAA4CE,EAA5CF,kBAAmBL,EAAyBO,EAAzBP,qBAC3BQ,QAAQC,IAAIJ,GACZK,qBAAU,WACRV,MACC,IAEH,IAAMW,EAAYC,mBAAQ,WAAO,IAAD,EAC9B,OACE,UAAAP,EAAkBzD,YAAlB,eAAwBkC,MAAM+B,QAC5B,kBAEE,mUAFF,EAAGC,aAGA,KAEN,CAACT,EAAkBzD,OAEtB,OAAI,OAACyD,QAAD,IAACA,GAAD,UAACA,EAAmBzD,YAApB,aAAC,EAAyBkC,OAK5B,yBAAKiC,UAAU,aACb,wBAAIA,UAAU,oBAAd,aACA,wBAAIA,UAAU,uBAAd,8BAC8B,IAC5B,uBACEC,KAAK,2CACLC,OAAO,SACPC,IAAI,uBAHN,aAFF,KAWA,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,6DACb,yBAAKA,UAAU,wCAAf,QAEA,yBAAKA,UAAU,wCAAf,YAEA,yBAAKA,UAAU,wCAAf,YAGDJ,EAAUQ,KAAI,SAACC,EAAWC,GACzB,OACE,kBAAC,OAAD,CACEN,UAAU,qCACVrD,IAAK2D,EAAI,EACTC,GAAE,qBAAgBF,EAAKN,UAEvB,yBAAKC,UAAU,8DACb,yBAAKA,UAAU,yDAAf,QAICM,EAAI,GAGP,yBAAKN,UAAU,+DACb,yBAAKA,UAAU,yDAAf,YAGA,8BACGQ,IAAa,CACZC,iBAAkB,KADnBD,CAEEE,OAAOC,OAAON,EAAKO,QAAU,KAAYC,MAAM,KAAK,KACvD,0BAAMb,UAAU,aAAhB,IAEGQ,IAAa,CACZC,iBAAkB,IADnBD,CAGCE,OACEC,OAAON,EAAKO,QAAU,KAAYC,MAAM,KAAK,IAAM,KAV3D,YAkBF,yBAAKb,UAAU,8DACb,yBAAKA,UAAU,yDAAf,WAICK,EAAKN,QAAQe,MAAM,EAAG,WArE9B,kBAAC,IAAD","file":"static/js/20.cb80c928.chunk.js","sourcesContent":["export const SEARCH_TOKEN_BY_ID_STRUCT = 'assets/tokenid/issuingBox';\n\nexport const UNSPENT_SELL_ORDERS_BY_TOKEN_ID_STRUCT =\n  '/dex/tokens/tokenid/unspentSellOrders';\n\nexport const UNSPENT_BUY_ORDERS_BY_TOKEN_ID_STRUCT =\n  '/dex/tokens/tokenid/unspentBuyOrders';\n\nexport const GET_ALL_ISSUED_TOKENS_STRUCT = '/assets/issuingBoxes';\n\nexport const GET_TOTAL_ISSUED_TOKENS_STRUCT = '/assets/issuingBoxes/total';\n\nexport const GET_OPENAPI_YAML_STRUCT = '/docs/openapi';\n\nexport const GET_UNCONFIRMED_TRANSACTIONS_STRUCT = '/transactions/unconfirmed';\n\nexport const GET_UNCONFIRMED_TRANSACTION_STRUCT =\n  '/transactions/unconfirmed/:id';\n\nexport const GET_ORACLE_POOL_DATA_STRUCT = 'oracle/frontendData';\n\nexport const GET_ADDRESSES_BALANCES_STRUCT = 'addresses/balances';\n","import { stopStructFetch, startStructFetch } from 'redux-struct';\nimport axios from 'axios';\n\nexport const fetchStruct = (\n  dispatch: any,\n  structId: string,\n  method: string,\n  url: string,\n  params: any = null\n) => {\n  dispatch(startStructFetch(structId));\n\n  return axios[method](url, params)\n    .then((res: any) => res.body || res.data)\n    .then((result: any) => {\n      if (!result) {\n        dispatch(stopStructFetch(structId, result));\n\n        return Promise.resolve(result);\n      }\n\n      const error = result.errors || result.error;\n\n      if (error) {\n        dispatch(stopStructFetch(structId, new Error(error)));\n\n        return Promise.reject(new Error(error));\n      }\n\n      dispatch(stopStructFetch(structId, result));\n\n      return Promise.resolve(result);\n    })\n    .catch((error: Error) => {\n      dispatch(stopStructFetch(structId, error));\n\n      return Promise.reject(error);\n    });\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { GET_ADDRESSES_BALANCES_STRUCT } from './../constants/struct.types';\nimport axios, { AxiosResponse } from 'axios';\n\nimport environment from '../config/environment';\nimport { fetchStruct } from 'src/utils/fetchStruct';\n\nexport class AddressApiService {\n  static get apiUrl(): string {\n    return `${environment.apiUrl}/addresses`;\n  }\n\n  static getAddress(id: string): any {\n    return axios\n      .get(`${environment.apiUrl}/addresses/${id}`)\n      .then((response: AxiosResponse) => {\n        if (!response) {\n          return Promise.reject(\n            `Address api service. Request: ${environment.apiUrl}/addresses/${id}.`\n          );\n        }\n\n        return response.data;\n      });\n  }\n\n  static getConfirmed(id: string, params: any) {\n    return axios\n      .get(`${environment.apiUrl}/addresses/${id}/transactions`, {\n        params,\n      })\n      .then((response: AxiosResponse) => {\n        if (!response) {\n          return Promise.reject(\n            `Address api service. Request: ${environment.apiUrl}/addresses/${id}/transactions.`\n          );\n        }\n\n        return response.data;\n      });\n  }\n\n  static getUnconfirmed(id: string, params: any) {\n    return axios\n      .get(`${environment.apiUrl}/transactions/unconfirmed/byAddress/${id}`, {\n        params,\n      })\n      .then((response: AxiosResponse) => {\n        if (!response) {\n          return Promise.reject(\n            `Address api service. Request: ${environment.apiUrl}/addresses/${id}/transactions.`\n          );\n        }\n\n        return response.data;\n      });\n  }\n\n  static async getAddressTransactions(id: string, params: any): Promise<any> {\n    const { offset, limit } = params;\n    const unconfirmed = await this.getUnconfirmed(id, { offset, limit });\n\n    if (unconfirmed.total === 0 || unconfirmed.total < offset) {\n      const confirmed = await this.getConfirmed(id, {\n        offset: offset - unconfirmed.total,\n        limit,\n      });\n\n      return {\n        items: confirmed.items,\n        total: unconfirmed.total + confirmed.total,\n      };\n    }\n\n    if (unconfirmed.items.length < limit) {\n      const newLimit = limit - unconfirmed.items.length;\n\n      const confirmed = await this.getConfirmed(id, {\n        offset: 0,\n        limit: newLimit,\n      });\n\n      return {\n        items: [...unconfirmed.items, ...confirmed.items],\n        total: unconfirmed.total + confirmed.total,\n      };\n    }\n\n    const confirmed = await this.getConfirmed(id, {\n      offset: 0,\n      limit: 1,\n    });\n\n    return {\n      items: [...unconfirmed.items],\n      total: unconfirmed.total + confirmed.total,\n    };\n  }\n\n  static getAddressesBalances(dispatch: any): any {\n    return fetchStruct(\n      dispatch,\n      GET_ADDRESSES_BALANCES_STRUCT,\n      'get',\n      `${environment.apiUrl}/addresses/balances?limit=100`\n    );\n  }\n}\n","import { Action, ActionCreatorsMapObject, Dispatch } from 'redux';\n\nimport {\n  GET_ADDRESS,\n  GET_ADDRESS_SUCCESS,\n  GET_ADDRESS_TRANSACTIONS,\n  GET_ADDRESS_TRANSACTIONS_SUCCESS,\n} from '../constants/address.types';\nimport { AddressApiService } from '../services/address.api.service';\n\nexport interface AddressActions extends ActionCreatorsMapObject {\n  getAddress: (id: string) => any;\n  getAddressTransactions: (id: string, params: any) => any;\n  getAddressesBalances: () => (dispatch: Dispatch<Action>) => any;\n}\n\nexport const AddressActions: AddressActions = {\n  getAddress(id: string): any {\n    return (dispatch: Dispatch<Action>) => {\n      dispatch({\n        type: GET_ADDRESS,\n      });\n\n      AddressApiService.getAddress(id).then((data: any) => {\n        dispatch({\n          payload: {\n            data,\n          },\n          type: GET_ADDRESS_SUCCESS,\n        });\n      });\n    };\n  },\n\n  getAddressTransactions(id: string, params: any): any {\n    return (dispatch: Dispatch<Action>) => {\n      dispatch({\n        type: GET_ADDRESS_TRANSACTIONS,\n      });\n\n      AddressApiService.getAddressTransactions(id, params).then((data: any) => {\n        dispatch({\n          payload: {\n            data,\n          },\n          type: GET_ADDRESS_TRANSACTIONS_SUCCESS,\n        });\n      });\n    };\n  },\n\n  getAddressesBalances() {\n    return (dispatch: any) => AddressApiService.getAddressesBalances(dispatch);\n  },\n};\n","import { getStruct } from 'redux-struct';\nimport { GET_ADDRESSES_BALANCES_STRUCT } from './../constants/struct.types';\n\nexport const addressesBalancesStructSelector = (state: any) =>\n  getStruct(GET_ADDRESSES_BALANCES_STRUCT)(state);\n","import React, { useEffect, useMemo } from 'react';\nimport './rich-list.scss';\n\nimport { connect } from 'react-redux';\nimport { addressesBalancesStructSelector } from 'src/selectors/addresses';\nimport { AddressActions } from 'src/actions/address.actions';\nimport { bindActionCreators } from 'redux';\nimport LoaderLogo from 'src/components/loader/loader';\nimport formatNumber from 'format-number';\nimport { Link } from 'react-router-dom';\n\nconst RichList = (props: any) => {\n  const { addressesBalances, getAddressesBalances } = props;\n  console.log(addressesBalances);\n  useEffect(() => {\n    getAddressesBalances();\n  }, []);\n\n  const addresses = useMemo(() => {\n    return (\n      addressesBalances.data?.items.filter(\n        ({ address }: any) =>\n          address !==\n          '2Z4YBkDsDvQj8BX7xiySFewjitqp2ge9c99jfes2whbtKitZTxdBYqbrVZUvZvKv6aqn9by4kp3LE1c26LCyosFnVnm6b6U1JYvWpYmL2ZnixJbXLjWAWuBThV1D6dLpqZJYQHYDznJCk49g5TUiS4q8khpag2aNmHwREV7JSsypHdHLgJT7MGaw51aJfNubyzSKxZ4AJXFS27EfXwyCLzW1K6GVqwkJtCoPvrcLqmqwacAWJPkmh78nke9H4oT88XmSbRt2n9aWZjosiZCafZ4osUDxmZcc5QVEeTWn8drSraY3eFKe8Mu9MSCcVU'\n      ) || []\n    );\n  }, [addressesBalances.data]);\n\n  if (!addressesBalances?.data?.items) {\n    return <LoaderLogo></LoaderLogo>;\n  }\n\n  return (\n    <div className=\"rich-list\">\n      <h1 className=\"rich-list__title\">Rich List</h1>\n      <h4 className=\"rich-list__subtitle\">\n        Want financial privacy? Use{' '}\n        <a\n          href=\"https://github.com/ergoMixer/ergoMixBack\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          ErgoMixer\n        </a>\n        !\n      </h4>\n      <div className=\"rich-list-table\">\n        <div className=\"rich-list-table__body bi-table\">\n          <div className=\"rich-list-table-header rich-list-table__row bi-table__row\">\n            <div className=\"rich-list-table__cell bi-table__cell\">Rank</div>\n\n            <div className=\"rich-list-table__cell bi-table__cell\">Quantity</div>\n\n            <div className=\"rich-list-table__cell bi-table__cell\">Address</div>\n          </div>\n\n          {addresses.map((item: any, i: number) => {\n            return (\n              <Link\n                className=\"rich-list-table__row bi-table__row\"\n                key={i + 1}\n                to={`/addresses/${item.address}`}\n              >\n                <div className=\"rich-list-table__cell bi-table__cell bi-tokens-table__cell\">\n                  <div className=\"rich-list-table__cell-name bi-tokens-table__cell-name\">\n                    Rank\n                  </div>\n\n                  {i + 1}\n                </div>\n\n                <div className=\"rich-list-table__cell bi-table__cell  bi-tokens-table__cell\">\n                  <div className=\"rich-list-table__cell-name bi-tokens-table__cell-name\">\n                    Quantity\n                  </div>\n                  <span>\n                    {formatNumber({\n                      integerSeparator: ',',\n                    })(Number(String(item.balance / 1000000000).split('.')[0]))}\n                    <span className=\"text-gray\">\n                      .\n                      {formatNumber({\n                        integerSeparator: '',\n                      })(\n                        Number(\n                          String(item.balance / 1000000000).split('.')[1] || 0\n                        )\n                      )}\n                    </span>\n                    &nbsp;ERG\n                  </span>\n                </div>\n\n                <div className=\"rich-list-table__cell bi-table__cell bi-tokens-table__cell\">\n                  <div className=\"rich-list-table__cell-name bi-tokens-table__cell-name\">\n                    Address\n                  </div>\n\n                  {item.address.slice(0, 8)}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\nconst mapStateToProps = (state: any) => ({\n  addressesBalances: addressesBalancesStructSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators({ ...AddressActions }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RichList);\n"],"sourceRoot":""}